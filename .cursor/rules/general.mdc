---
description: General Rules
globs:
alwaysApply: false
---
# General
- Use pnpm to install dependencies
- This is an MCP (Model Context Protocol) collection for the umi framework

# Build & Test Commands
- Dev: `pnpm dev` or `mcp-inspector tsx ./src/cli.ts fixtures/normal`
- Build CLI: `pnpm build:cli` or `bun build src/cli.ts --external effect --external @valibot/to-json-schema --minify --outfile dist/cli.mjs --target=node`
- Build Index: `pnpm build:index` or `bun build src/index.ts --external fastmcp --minify --outfile dist/index.mjs --target=node`
- Build All: `pnpm build`
- Format: `pnpm format` or `prettier --write .`
- Test: `pnpm test` or `vitest run`
- Watch Tests: `pnpm test:watch` or `vitest`
- Type Check: `pnpm typecheck` or `tsc --noEmit`

# Code Style Guidelines
- TypeScript with strict type checking
- Single quotes for strings
- Trailing commas required
- Max line length: 80 chars
- No semicolons
- Use async/await for promises

# Import Order (via @trivago/prettier-plugin-sort-imports)
1. Node built-ins (^node:)
2. External packages (^@?\w)
3. Internal aliases (^@/)
4. Relative imports (^[./])

# Error Handling
- Use zod for runtime type validation
- Prefer throwing errors over returning null/undefined
- Use descriptive error messages

# Naming Conventions
- PascalCase for types/interfaces/classes
- camelCase for variables/functions
- Use type over interface where possible
- Suffix tool classes with 'Tool'
- MCP tools are prefixed with 'umi-' (e.g., umi-help, umi-config-list)
